#include<bits/stdc++.h>
long long merge(long long* arr,int si,int mid,int ei){
	long long count=0;
	int i=si;
	int j=mid+1;
	int k=0;
	vector<long long> temp;
	while(i<=mid && j<=ei){
		if(arr[i]<=arr[j]){
			temp.push_back(arr[i++]);
		}
		else if(arr[j]<arr[i]){
			temp.push_back(arr[j++]);
			count+=mid-i+1;
		}
	}
	while(i<=mid){
		temp.push_back(arr[i++]);
	}
	while(j<=ei){
		temp.push_back(arr[j++]);
	}
	for(int i=si;i<=ei;i++){
		arr[i]=temp[k++];
	}
	return count;
}

long long getInversionHelper(long long* arr,int si,int ei){
	if(si>=ei)   return 0;
	int mid=(si+ei)/2;
	long long x=getInversionHelper(arr,si,mid);
	long long y=getInversionHelper(arr,mid+1,ei);
	long long z=merge(arr,si,mid,ei);
	return (x+y+z);
}

long long getInversions(long long *arr, int n){
    // Write your code here.
	return getInversionHelper(arr,0,n-1);
}
