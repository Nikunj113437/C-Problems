class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        // using sorting 
        
        // int n=nums.size();
        // if(n==0)   return 0;
        // sort(nums.begin(),nums.end());
        // int count=1;
        // int maxCount=INT_MIN;
        // int prev=nums[0];
        // for(int i=0;i<n;i++){
        //     if(nums[i]-prev==1)   count++;
        //     else if(nums[i]!=prev){
        //         count=1;
        //     }
        //     maxCount=max(maxCount,count);
        //     prev=nums[i];
        // }
        // return maxCount;
        
        int n=nums.size();
        if(n==0)    return 0;
        unordered_map<int,int> map;
        for(int i=0;i<n;i++){
            map[nums[i]]=i;
        }
        int count=1;
        int maxCount=INT_MIN;
        for(int i=0;i<n;i++){
            if(map.count(nums[i]-1)==0){
                while(map.count(nums[i]+1)>0){
                    count++;
                    nums[i]+=1;
                }
                maxCount=max(count,maxCount);
                count=1;
            }
        }
        return maxCount;
    }
};
