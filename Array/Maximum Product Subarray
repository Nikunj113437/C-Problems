#include<bits/stdc++.h>
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        // 1st Approach
        // int n=nums.size();
        // int leftMax=nums[0];
        // int rightMax=nums[0];
        // int prod=1;
        // bool zeroPresent=false;
        // for(int i=0;i<n;i++){
        //     prod*=nums[i];
        //     if(nums[i]==0){
        //         zeroPresent=true;
        //         prod=1;
        //         continue;
        //     }
        //     leftMax=max(leftMax,prod);
        // }
        // prod=1;
        // for(int i=n-1;i>=0;i--){
        //     prod*=nums[i];
        //     if(nums[i]==0){
        //         zeroPresent=true;
        //         prod=1;
        //         continue;
        //     }
        //     rightMax=max(rightMax,prod);
        // }
        // if(zeroPresent)   return max(max(leftMax,rightMax),0);
        // return max(leftMax,rightMax);
        
        int n=nums.size();
        int maxm=1;
        int minm=1;
        int maxProd=INT_MIN;
        for(int i=0;i<n;i++){
            if(nums[i]<0){
                swap(maxm,minm);
            }
            maxm=max(nums[i],maxm*nums[i]);
            minm=min(nums[i],minm*nums[i]);
            maxProd=max(maxProd,maxm);
        }
        return maxProd;
    }
};
