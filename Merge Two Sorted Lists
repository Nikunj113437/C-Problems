/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* head1, ListNode* head2) {
        if(head1==NULL)   return head2;
        if(head2==NULL)   return head1;
        ListNode* temp1=head1;
        ListNode* temp2=head2;
        ListNode* mergeList=NULL;
        if(temp1->val<=temp2->val){
            mergeList=temp1;
            temp1=temp1->next;
        }
        else{
            mergeList=temp2;
            temp2=temp2->next;
        }
        ListNode* finalList=mergeList;
        while(temp1!=NULL && temp2!=NULL){
            if(temp1->val<=temp2->val){
                mergeList->next=temp1;
                mergeList=mergeList->next;
                temp1=temp1->next;
            }
            else{
                mergeList->next=temp2;
                mergeList=mergeList->next;
                temp2=temp2->next;
            }
        }
        while(temp1!=NULL){
            mergeList->next=temp1;
            mergeList=mergeList->next;
            temp1=temp1->next;
        }
        while(temp2!=NULL){
            mergeList->next=temp2;
            mergeList=mergeList->next;
            temp2=temp2->next;
        }
        return finalList;
    }
};
