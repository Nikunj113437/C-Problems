/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseLL(ListNode* head){
        if(head==NULL || head->next==NULL)   return head;
        ListNode* temp=reverseLL(head->next);
        head->next->next=head;
        head->next=NULL;
        return temp;
    }
    
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next==NULL)   return true;
        ListNode* temp1=head;
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode* temp=slow->next;
        slow->next=NULL;
        ListNode* temp2=reverseLL(temp);
        while(temp1!=NULL && temp2!=NULL){
            if(temp1->val!=temp2->val)  return false;
            temp1=temp1->next;
            temp2=temp2->next;
        }
        return true;
    }
};
